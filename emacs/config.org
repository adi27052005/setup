#+TITLE: Adi's GNU Emacs Configuration
#+AUTHOR: Aditya Gautam
#+DESCRIPTION: inspired from distrotube
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#making-global-keybinds-for-copy--paste][Making global keybinds for copy & paste]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the font face]]
  - [[#zooming-inout-keybinds][Zooming In/Out Keybinds]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table Of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disabling-electric-indent][Disabling Electric Indent]]
  - [[#requiring-org-tempo][Requiring org-tempo]]
- [[#reload-emacs-function][RELOAD EMACS FUNCTION]]
- [[#sudo-edit][SUDO EDIT]]
- [[#whichkey][WHICHKEY]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

** Load Evil Mode

#+begin_src emacs-lisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode)
  )
    (use-package evil-collection
      :after evil
      :config
      (setq evil-collection-mode-list '(dashboard dired ibuffer))
      (evil-collection-init)
  )
  (use-package evil-tutor)



  ;;Turns off elpaca-use-package-mode current declartion
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  ;; (elpaca nil (message "deferred"))
#+end_src


** General Keybindings

#+begin_src emacs-lisp

  (use-package general
      :config
      (general-evil-setup)

  (general-create-definer adi/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC")

  (adi/leader-keys
      "." '(find-file :wk "Find File")
      "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit Emacs Config")
      "TAB TAB" '(comment-line :wk "Comment Line")
  )

  (adi/leader-keys
      "b" '(:ignore t :wk "Buffer")
      "b b" '(switch-to-buffer :wk "Switch Buffer")
      "b i" '(ibuffer :wk "IBuffer")
      "b k" '(kill-this-buffer :wk "Kill This Buffer")
      "b n" '(next-buffer :wk "Next Buffer")
      "b p" '(previous-buffer :wk "Previous Buffer")
      "b r" '(revert-buffer :wk "Reload Buffer")
  )

  (adi/leader-keys
      "e" '(:ignore t :wk "Evaluate")
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region")
  )
  (adi/leader-keys
      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable")
      "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config")
      ;;"h r r" '(reload-init-file :wk "Reload emacs config")
  )
  (adi/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t t" '(visual-line-mode :wk "Toggle truncated lines")
  )
  )

#+end_src

** Making global keybinds for copy & paste
#+begin_src emacs-lisp

 (defun copy-to-clipboard ()
    "Copies selection to x-clipboard."
    (interactive)
    (if (display-graphic-p)
        (progn
          (message "Yanked region to x-clipboard!")
          (call-interactively 'clipboard-kill-ring-save)
          )
      (if (region-active-p)
          (progn
            (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
            (message "Yanked region to clipboard!")
            (deactivate-mark))
        (message "No region active; can't yank to clipboard!")))
    )

  (defun paste-from-clipboard ()
    "Pastes from x-clipboard."
    (interactive)
    (if (display-graphic-p)
        (progn
          (clipboard-yank)
          (message "graphics active")
          )
      (insert (shell-command-to-string "xsel -o -b"))
      )
    ) 

  (global-set-key (kbd "C-M-c") 'copy-to-clipboard)
  (global-set-key (kbd "C-M-v") 'paste-from-clipboard)

#+end_src

* FONTS
+ Defining the various fonts emacs will use.

** Setting the font face
#+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(weight . 'Bold))
    (setq-default line-spacing 0.1)
    (set-face-attribute 'default nil
	:font "JetBrains Mono NerdFont"
	:height 140
	:weight 'SemiBold)
    (set-face-attribute 'variable-pitch nil
	:font "Fira Sans"
	:height 140
	:weight 'Regular)
    (set-face-attribute 'fixed-pitch nil
	:font "JetBrains Mono NerdFont"
	:height 140
	:weight 'SemiBold)

    ;; Makes commented text and keyword italics
    (set-face-attribute 'font-lock-comment-face nil
      :slant 'italic)
    (set-face-attribute 'font-lock-keyword-face nil
      :slant 'italic)

  '(default-frame-alist
      '((fullscreen . fullscreen)
      (font . "JetBrains Mono-13")
      (line-spacing . 0.2)))
#+end_src

** Zooming In/Out Keybinds
#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU Emacs look a "little" better.

** Disable Menubar, Toolbars and scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp

  (use-package counsel
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src

* ORG MODE
** Enabling Table Of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
#+begin_src emacs-lisp
    (add-hook 'org-mode-hook 'org-indent-mode)
    (use-package org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disabling Electric Indent
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

** Requiring org-tempo

Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for ‘<s’ followed by TAB to expand to a begin_src tag.  Other expansions available include:

|------------------------+-----------------------------------------|
|          <c>           |                   <c>                   |
| Typing the below + TAB |              Expands to...              |
|------------------------+-----------------------------------------|
|           <a           | ’#+BEGIN_EXPORT ascii’ … ‘#+END_EXPORT  |
|           <c           |    ’#+BEGIN_CENTER’ … ‘#+END_CENTER’    |
|           <C           |   ’#+BEGIN_COMMENT’ … ‘#+END_COMMENT’   |
|           <e           |   ’#+BEGIN_EXAMPLE’ … ‘#+END_EXAMPLE’   |
|           <E           |    ’#+BEGIN_EXPORT’ … ‘#+END_EXPORT’    |
|           <h           | ’#+BEGIN_EXPORT html’ … ‘#+END_EXPORT’  |
|           <l           | ’#+BEGIN_EXPORT latex’ … ‘#+END_EXPORT’ |
|           <q           |     ’#+BEGIN_QUOTE’ … ‘#+END_QUOTE’     |
|           <s           |       ’#+BEGIN_SRC’ … ‘#+END_SRC’       |
|           <v           |     ’#+BEGIN_VERSE’ … ‘#+END_VERSE’     |
|------------------------+-----------------------------------------|

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

* RELOAD EMACS FUNCTION
This is just an example of how to create a simple function in Emacs.  Use this function to reload Emacs after adding changes to the config.  Yes, I am loading the user-init-file twice in this function, which is a hack because for some reason, just loading the user-init-file once does not work properly.

#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src

* SUDO EDIT
#+begin_src emacs-lisp

  (use-package sudo-edit
    :config
    (adi/leader-keys
    "fu" '(sudo-edit-find-file :wk "Sudo Find File")
    "fU" '(sudo-edit :wk "Sudo Edit File")
  )
)

#+end_src

* WHICHKEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
	(which-key-mode 1)
    :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit t
	which-key-separator " "))


#+end_src
